# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-15 01:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../Doc/library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr ""

#: ../Doc/library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""

#: ../Doc/library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../Doc/library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""

#: ../Doc/library/dbm.rst:31
msgid ""
"Returns one of the following values: ``None`` if the file can't be opened "
"because it's unreadable or doesn't exist; the empty string (``''``) if the "
"file's format can't be guessed; or a string containing the required module "
"name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``."
msgstr ""

#: ../Doc/library/dbm.rst:36 ../Doc/library/dbm.rst:210
#: ../Doc/library/dbm.rst:309 ../Doc/library/dbm.rst:393
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: ../Doc/library/dbm.rst:41
msgid "Open the database file *file* and return a corresponding object."
msgstr ""

#: ../Doc/library/dbm.rst:43
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""

#: ../Doc/library/dbm.rst:47 ../Doc/library/dbm.rst:166
#: ../Doc/library/dbm.rst:357
msgid "The optional *flag* argument can be:"
msgstr ""

#: ../Doc/library/dbm.rst:50 ../Doc/library/dbm.rst:169
#: ../Doc/library/dbm.rst:188 ../Doc/library/dbm.rst:287
#: ../Doc/library/dbm.rst:360
msgid "Value"
msgstr ""

#: ../Doc/library/dbm.rst:50 ../Doc/library/dbm.rst:169
#: ../Doc/library/dbm.rst:188 ../Doc/library/dbm.rst:287
#: ../Doc/library/dbm.rst:360
msgid "Meaning"
msgstr ""

#: ../Doc/library/dbm.rst:52 ../Doc/library/dbm.rst:171
#: ../Doc/library/dbm.rst:289 ../Doc/library/dbm.rst:362
msgid "``'r'``"
msgstr ""

#: ../Doc/library/dbm.rst:52 ../Doc/library/dbm.rst:171
#: ../Doc/library/dbm.rst:289 ../Doc/library/dbm.rst:362
msgid "Open existing database for reading only (default)"
msgstr ""

#: ../Doc/library/dbm.rst:55 ../Doc/library/dbm.rst:174
#: ../Doc/library/dbm.rst:292 ../Doc/library/dbm.rst:365
msgid "``'w'``"
msgstr ""

#: ../Doc/library/dbm.rst:55 ../Doc/library/dbm.rst:174
#: ../Doc/library/dbm.rst:292 ../Doc/library/dbm.rst:365
msgid "Open existing database for reading and writing"
msgstr ""

#: ../Doc/library/dbm.rst:58 ../Doc/library/dbm.rst:177
#: ../Doc/library/dbm.rst:295 ../Doc/library/dbm.rst:368
msgid "``'c'``"
msgstr ""

#: ../Doc/library/dbm.rst:58 ../Doc/library/dbm.rst:177
#: ../Doc/library/dbm.rst:295 ../Doc/library/dbm.rst:368
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

#: ../Doc/library/dbm.rst:61 ../Doc/library/dbm.rst:180
#: ../Doc/library/dbm.rst:298 ../Doc/library/dbm.rst:371
msgid "``'n'``"
msgstr ""

#: ../Doc/library/dbm.rst:61 ../Doc/library/dbm.rst:180
#: ../Doc/library/dbm.rst:298 ../Doc/library/dbm.rst:371
msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

#: ../Doc/library/dbm.rst:65 ../Doc/library/dbm.rst:302
#: ../Doc/library/dbm.rst:375
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""

#: ../Doc/library/dbm.rst:70
msgid ""
"The object returned by :func:`.open` supports the same basic functionality "
"as dictionaries; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :keyword:`in` operator and the :meth:`keys` "
"method are available, as well as :meth:`get` and :meth:`setdefault`."
msgstr ""

#: ../Doc/library/dbm.rst:75
msgid ""
":meth:`get` and :meth:`setdefault` are now available in all database modules."
msgstr ""

#: ../Doc/library/dbm.rst:78
msgid ""
"Deleting a key from a read-only database raises database module specific "
"error instead of :exc:`KeyError`."
msgstr ""

#: ../Doc/library/dbm.rst:82
msgid "Accepts :term:`path-like object` for file."
msgstr ""

#: ../Doc/library/dbm.rst:85
msgid ""
"Key and values are always stored as bytes. This means that when strings are "
"used they are implicitly converted to the default encoding before being "
"stored."
msgstr ""

#: ../Doc/library/dbm.rst:89
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""

#: ../Doc/library/dbm.rst:92
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`.open`."
msgstr ""

#: ../Doc/library/dbm.rst:96
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: ../Doc/library/dbm.rst:126
msgid "Module :mod:`shelve`"
msgstr ""

#: ../Doc/library/dbm.rst:127
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../Doc/library/dbm.rst:130
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../Doc/library/dbm.rst:134
msgid ":mod:`dbm.gnu` --- GNU's reinterpretation of dbm"
msgstr ""

#: ../Doc/library/dbm.rst:140
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr ""

#: ../Doc/library/dbm.rst:144
msgid ""
"This module is quite similar to the :mod:`dbm` module, but uses the GNU "
"library ``gdbm`` instead to provide some additional functionality.  Please "
"note that the file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible."
msgstr ""

#: ../Doc/library/dbm.rst:148
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the GNU DBM library. "
"``dbm.gnu.gdbm`` objects behave like mappings (dictionaries), except that "
"keys and values are always converted to bytes before storing.  Printing a "
"``gdbm`` object doesn't print the keys and values, and the :meth:`items` "
"and :meth:`values` methods are not supported."
msgstr ""

#: ../Doc/library/dbm.rst:157
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../Doc/library/dbm.rst:163
msgid ""
"Open a ``gdbm`` database and return a :class:`gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""

#: ../Doc/library/dbm.rst:184
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr ""

#: ../Doc/library/dbm.rst:190
msgid "``'f'``"
msgstr ""

#: ../Doc/library/dbm.rst:190
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr ""

#: ../Doc/library/dbm.rst:193
msgid "``'s'``"
msgstr ""

#: ../Doc/library/dbm.rst:193
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr ""

#: ../Doc/library/dbm.rst:197
msgid "``'u'``"
msgstr ""

#: ../Doc/library/dbm.rst:197
msgid "Do not lock database."
msgstr ""

#: ../Doc/library/dbm.rst:200
msgid ""
"Not all flags are valid for all versions of ``gdbm``.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../Doc/library/dbm.rst:204
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""

#: ../Doc/library/dbm.rst:207
msgid ""
"In addition to the dictionary-like methods, ``gdbm`` objects have the "
"following methods:"
msgstr ""

#: ../Doc/library/dbm.rst:215
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../Doc/library/dbm.rst:222
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""

#: ../Doc/library/dbm.rst:233
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the ``gdbm`` file, this routine will reorganize the database.  "
"``gdbm`` objects will not shorten the length of a database file except by "
"using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../Doc/library/dbm.rst:241
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: ../Doc/library/dbm.rst:246
msgid "Close the ``gdbm`` database."
msgstr ""

#: ../Doc/library/dbm.rst:249
msgid ":mod:`dbm.ndbm` --- Interface based on ndbm"
msgstr ""

#: ../Doc/library/dbm.rst:255
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr ""

#: ../Doc/library/dbm.rst:259
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the Unix \"(n)dbm\" "
"library. Dbm objects behave like mappings (dictionaries), except that keys "
"and values are always stored as bytes. Printing a ``dbm`` object doesn't "
"print the keys and values, and the :meth:`items` and :meth:`values` methods "
"are not supported."
msgstr ""

#: ../Doc/library/dbm.rst:264
msgid ""
"This module can be used with the \"classic\" ndbm interface or the GNU GDBM "
"compatibility interface. On Unix, the :program:`configure` script will "
"attempt to locate the appropriate header file to simplify building this "
"module."
msgstr ""

#: ../Doc/library/dbm.rst:270
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../Doc/library/dbm.rst:276
msgid "Name of the ``ndbm`` implementation library used."
msgstr ""

#: ../Doc/library/dbm.rst:281
msgid ""
"Open a dbm database and return a ``ndbm`` object.  The *filename* argument "
"is the name of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""

#: ../Doc/library/dbm.rst:284
msgid "The optional *flag* argument must be one of these values:"
msgstr ""

#: ../Doc/library/dbm.rst:306
msgid ""
"In addition to the dictionary-like methods, ``ndbm`` objects provide the "
"following method:"
msgstr ""

#: ../Doc/library/dbm.rst:314
msgid "Close the ``ndbm`` database."
msgstr ""

#: ../Doc/library/dbm.rst:318
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: ../Doc/library/dbm.rst:323
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr ""

#: ../Doc/library/dbm.rst:329
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""

#: ../Doc/library/dbm.rst:336
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like interface "
"which is written entirely in Python.  Unlike other modules such as :mod:`dbm."
"gnu` no external library is required.  As with other persistent mappings, "
"the keys and values are always stored as bytes."
msgstr ""

#: ../Doc/library/dbm.rst:341
msgid "The module defines the following:"
msgstr ""

#: ../Doc/library/dbm.rst:346
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../Doc/library/dbm.rst:352
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat` "
"and :file:`.dir` extensions are created."
msgstr ""

#: ../Doc/library/dbm.rst:380
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""

#: ../Doc/library/dbm.rst:384
msgid ""
":func:`.open` always creates a new database when the flag has the value "
"``'n'``."
msgstr ""

#: ../Doc/library/dbm.rst:388
msgid ""
"A database opened with flags ``'r'`` is now read-only.  Opening with flags "
"``'r'`` and ``'w'`` no longer creates a database if it does not exist."
msgstr ""

#: ../Doc/library/dbm.rst:396
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, :class:`dumbdbm` objects provide the following "
"methods:"
msgstr ""

#: ../Doc/library/dbm.rst:402
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""

#: ../Doc/library/dbm.rst:407
msgid "Close the ``dumbdbm`` database."
msgstr ""

#: ../Doc/library/dbm.rst:325
msgid "databases"
msgstr ""
